AWSTemplateFormatVersion: 2010-09-09 
Description:   
  This template creates wordpress stack based on AWS bestest practice.
#Security Groups Resources

Parameters:  
  SSHLocation:
    Description: ' The IP address range that can be used to access the web server using SSH.'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  VPCStackName:
          Description: The name of the VPC stack that exports the values
          Type: String  

Resources:

  VPNSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for Bastion instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: udp
          FromPort: '13000'
          ToPort: '13003'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref SSHLocation    
      VpcId: 
         Fn::ImportValue: !Sub '${VPCStackName}-VPC'
        

  DataBaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: '3306'
         ToPort: '3306'
         SourceSecurityGroupId: !Ref AsteriskServerSecurityGroup
      VpcId:  
        Fn::ImportValue: !Sub '${VPCStackName}-VPC'
        




  DBSecurityGroupIngress:
      Type: 'AWS::EC2::SecurityGroupIngress'
      Properties:
        IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !Ref DataBaseSecurityGroup
        GroupId: !Ref DataBaseSecurityGroup
      DependsOn: 
        - DataBaseSecurityGroup     





  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPS access on port 80/443
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: '5060'
          ToPort: '5060'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: udp
          FromPort: '10000'
          ToPort: '20000'
          CidrIp: 0.0.0.0/0
      VpcId: 
        Fn::ImportValue: !Sub '${VPCStackName}-VPC'

  AsteriskServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SIP access via port 5060 and RTP for all locked down to the load balancer SG + SSH access Bastion Host SG
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: '5060'
          ToPort: '5060'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: udp
          FromPort: '10000'
          ToPort: '20000'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref VPNSecurityGroup
        - IpProtocol: udp
          FromPort: '10000'
          ToPort: '20000'
          CidrIp: 0.0.0.0/0  
      VpcId: 
        Fn::ImportValue: !Sub '${VPCStackName}-VPC'

Outputs:
#VPC
  VPNSecurityGroup:
    Description: A reference to the created VPC
    Value: !Ref VPNSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-VPNSecurityGroup

  AsteriskServerSecurityGroup:
    Description: A reference to the created VPC
    Value: !Ref AsteriskServerSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-AsteriskServerSecurityGroup

  ELBSecurityGroup:
    Description: A reference to the created VPC
    Value: !Ref ELBSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-ELBSecurityGroup
 
  DataBaseSecurityGroup:
    Description: A reference to the created VPC
    Value: !Ref DataBaseSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-DataBaseSecurityGroup
 
